//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Inputs/SelectMaterial.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Assets.Scripts.Domain
{
    public partial class @SelectMaterial: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @SelectMaterial()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""SelectMaterial"",
    ""maps"": [
        {
            ""name"": ""MaterialSelection"",
            ""id"": ""7bd7a923-a95b-4a35-b346-e9ee5e6bcddd"",
            ""actions"": [
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""ab7a32ba-8611-47ff-b7ad-b6faf356d152"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Deselect"",
                    ""type"": ""Button"",
                    ""id"": ""6fe75b75-978c-4956-ad76-4ead651e7a69"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WatchCursor"",
                    ""type"": ""Value"",
                    ""id"": ""6524ee97-9a58-4a97-a781-28c6b7923eb9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""036769ea-571a-4e97-996e-10f44bca240b"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Tap,SlowTap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d66c13cb-e8d0-4559-8073-b96b4a76fd16"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Deselect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4e60eab3-10da-4e89-9d7f-d323bc791b42"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WatchCursor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // MaterialSelection
            m_MaterialSelection = asset.FindActionMap("MaterialSelection", throwIfNotFound: true);
            m_MaterialSelection_Select = m_MaterialSelection.FindAction("Select", throwIfNotFound: true);
            m_MaterialSelection_Deselect = m_MaterialSelection.FindAction("Deselect", throwIfNotFound: true);
            m_MaterialSelection_WatchCursor = m_MaterialSelection.FindAction("WatchCursor", throwIfNotFound: true);
        }

        ~@SelectMaterial()
        {
            UnityEngine.Debug.Assert(!m_MaterialSelection.enabled, "This will cause a leak and performance issues, SelectMaterial.MaterialSelection.Disable() has not been called.");
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // MaterialSelection
        private readonly InputActionMap m_MaterialSelection;
        private List<IMaterialSelectionActions> m_MaterialSelectionActionsCallbackInterfaces = new List<IMaterialSelectionActions>();
        private readonly InputAction m_MaterialSelection_Select;
        private readonly InputAction m_MaterialSelection_Deselect;
        private readonly InputAction m_MaterialSelection_WatchCursor;
        public struct MaterialSelectionActions
        {
            private @SelectMaterial m_Wrapper;
            public MaterialSelectionActions(@SelectMaterial wrapper) { m_Wrapper = wrapper; }
            public InputAction @Select => m_Wrapper.m_MaterialSelection_Select;
            public InputAction @Deselect => m_Wrapper.m_MaterialSelection_Deselect;
            public InputAction @WatchCursor => m_Wrapper.m_MaterialSelection_WatchCursor;
            public InputActionMap Get() { return m_Wrapper.m_MaterialSelection; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MaterialSelectionActions set) { return set.Get(); }
            public void AddCallbacks(IMaterialSelectionActions instance)
            {
                if (instance == null || m_Wrapper.m_MaterialSelectionActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_MaterialSelectionActionsCallbackInterfaces.Add(instance);
                @Select.started += instance.OnSelect;
                @Select.performed += instance.OnSelect;
                @Select.canceled += instance.OnSelect;
                @Deselect.started += instance.OnDeselect;
                @Deselect.performed += instance.OnDeselect;
                @Deselect.canceled += instance.OnDeselect;
                @WatchCursor.started += instance.OnWatchCursor;
                @WatchCursor.performed += instance.OnWatchCursor;
                @WatchCursor.canceled += instance.OnWatchCursor;
            }

            private void UnregisterCallbacks(IMaterialSelectionActions instance)
            {
                @Select.started -= instance.OnSelect;
                @Select.performed -= instance.OnSelect;
                @Select.canceled -= instance.OnSelect;
                @Deselect.started -= instance.OnDeselect;
                @Deselect.performed -= instance.OnDeselect;
                @Deselect.canceled -= instance.OnDeselect;
                @WatchCursor.started -= instance.OnWatchCursor;
                @WatchCursor.performed -= instance.OnWatchCursor;
                @WatchCursor.canceled -= instance.OnWatchCursor;
            }

            public void RemoveCallbacks(IMaterialSelectionActions instance)
            {
                if (m_Wrapper.m_MaterialSelectionActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IMaterialSelectionActions instance)
            {
                foreach (var item in m_Wrapper.m_MaterialSelectionActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_MaterialSelectionActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public MaterialSelectionActions @MaterialSelection => new MaterialSelectionActions(this);
        public interface IMaterialSelectionActions
        {
            void OnSelect(InputAction.CallbackContext context);
            void OnDeselect(InputAction.CallbackContext context);
            void OnWatchCursor(InputAction.CallbackContext context);
        }
    }
}
